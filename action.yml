name: "Catho go auto coverage custom action"
description: "Action to run and comment the coverage test results"

inputs:
  github-token:
    description: "Github token to comment on PR"
    required: true
  coverage-file-name:
    description: "File name that contains tests results by packaging"
    required: true
  total-coverage-file-name:
    description: "File name that contains total coverage tests results"
    required: true

runs:
  using: "composite"
  steps:

      - name: Comment on PR with test results
        uses: actions/github-script@v4
        env:
          GITHUB_TOKEN: ${{ inputs.github-token }}
        with:
          script: |
            const fs = require('fs');
            const coverageReport = fs.readFileSync(`./${{ inputs.coverage-file-name }}`, 'utf8');
            const totalCoverageReport = fs.readFileSync(`./${{ inputs.total-coverage-file-name }}`, 'utf8');
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });
            
            if (!prs.length) {
              console.log("No PR associated with this commit. Skipping comment.");
              return;
            }
            const pr = prs[0];
            const issueNumber = pr.number;

            const { data: comments } = await github.rest.issues.listComments({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const previousComment = comments.find(comment => comment.user.login === 'github-actions[bot]');

            const comment = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## Coverage report \n\n <table> <th>' + totalCoverageReport + '</th> </table> \n\n <details><summary>Show covered files </summary> <br/> \n\n | Test Coverage Report | \n |------| \n' + coverageReport + '</details>'
            }

            if (previousComment) {
              return await github.rest.issues.updateComment({
                comment_id: previousComment.id,
                ...comment
              });
            }
            
            await github.rest.issues.createComment({
              issue_number: issueNumber,
              ...comment
            });
